---
- name: Install prerequisites on localhost
  hosts: localhost
  become: true
  vars:
    ansible_connection: local

  pre_tasks:
    - name: Install EPEL repo (CentOS only)
      package:
        name: epel-release
        state: present
      when: ansible_distribution == "CentOS"

    - name: Install Python3 and pip3
      yum:
        name:
          - python3
          - python3-pip
        state: present
        update_cache: yes
      when: ansible_distribution == "CentOS"

    - name: Ensure pip is upgraded
      command: pip3 install --upgrade pip
      args:
        chdir: /tmp
      changed_when: false

    - name: Install AWS Python libraries
      pip:
        name:
          - boto3
          - botocore
          - awscli
        state: present

- name: Create EC2 Instance and Configure Security Group
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_connection: local

  tasks:
    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ security_group_name }}"
        description: "Security group for Apache web server"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg_result

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_centos7 }}"
        key_name: "{{ key_name }}"
        security_groups:
          - "{{ security_group_name }}"
        vpc_subnet_id: "{{ subnet }}"
        assign_public_ip: yes
        wait: yes
        wait_timeout: 600
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 20
        count: 1
        region: "{{ region }}"
        tags:
          Name: "web-server-ansible-training"
      register: ec2_instances

    - name: Extract public IPs of created instances
      set_fact:
        public_ips: "{{ ec2_instances.instances | map(attribute='public_ip_address') | list }}"

    - name: Extract instance IDs for tagging
      set_fact:
        instance_ids: "{{ ec2_instances.instances | map(attribute='instance_id') | list }}"

    - name: Add newly created hosts to inventory group
      add_host:
        hostname: "{{ item }}"
        groups: "{{ host_group_name }}"
      loop: "{{ public_ips }}"

    - name: Tag EC2 instances with Name tag
      amazon.aws.ec2_tag:
        resource: "{{ item }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "web-server-ansible-training"
      loop: "{{ instance_ids }}"

    - name: Wait for SSH to be available on all instances
      wait_for:
        host: "{{ item }}"
        port: 22
        delay: 10
        timeout: 300
        state: started
      loop: "{{ public_ips }}"

- name: Install Apache via Docker on EC2 instances
  hosts: "{{ host_group_name }}"
  become: true
  remote_user: centos
  vars:
    ansible_ssh_private_key_file: "~/.ssh/{{ key_name }}.pem"  # ← CHANGER CE CHEMIN SI NÉCESSAIRE !

  pre_tasks:
    - name: Install EPEL repo (CentOS only)
      package:
        name: epel-release
        state: present
      when: ansible_distribution == "CentOS"

    - name: Install Docker and Docker Compose (via get_url)
      get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Install Docker
      command: sh /tmp/get-docker.sh
      args:
        chdir: /tmp
      register: docker_install
      changed_when: "'Docker installed successfully' in docker_install.stdout"

    - name: Start and enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Install Docker Python SDK
      pip:
        name: docker
        state: present

    - name: Install community.docker collection (on controller, but needed for module)
      raw: ansible-galaxy collection install community.docker
      delegate_to: localhost
      run_once: true
      ignore_errors: yes

  tasks:
    - name: Create Apache container
      community.docker.docker_container:
        name: webapp
        image: httpd:latest
        ports:
          - "80:80"
        restart_policy: always
        state: started
      register: apache_container

    - name: Display Apache container info
      debug:
        msg: "Apache container {{ apache_container.container.Name }} is running at http://{{ inventory_hostname }}"
